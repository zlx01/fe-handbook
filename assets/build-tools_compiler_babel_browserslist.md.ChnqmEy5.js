import{_ as s,c as e,o as t,a4 as a}from"./chunks/framework.CFdyflnk.js";const k=JSON.parse('{"title":"browserslist","description":"","frontmatter":{},"headers":[],"relativePath":"build-tools/compiler/babel/browserslist.md","filePath":"build-tools/compiler/babel/browserslist.md","lastUpdated":1726577403000}'),i={name:"build-tools/compiler/babel/browserslist.md"},l=a(`<h1 id="browserslist" tabindex="-1"><a href="https://github.com/browserslist/browserslist" target="_blank" rel="nofollow noopener noreferrer">browserslist</a> <a class="header-anchor" href="#browserslist" aria-label="Permalink to &quot;[browserslist](https://github.com/browserslist/browserslist)&quot;">​</a></h1><blockquote><p>Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-preset-env</p></blockquote><blockquote><p>会被 @babel/preset-env 和 Autoprefixer 用来确定需要转译的 JavaScript 特性和需要添加的 CSS 浏览器前缀。</p></blockquote><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><ul><li><code>browserslist</code> field in <code>package.json</code></li><li><code>.browserslistrc</code> file</li></ul><p>例如 vue 项目的 <code>browserslist</code> 配置</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;browserslist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&gt; 1%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;last 2 versions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;not dead&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>&quot;&gt; 1%&quot;：支持市场占有率大于 1% 的浏览器。</li><li>&quot;last 2 versions&quot;：支持浏览器的最新两个版本。</li><li>&quot;not dead&quot;：不支持已经停止维护的浏览器。</li></ul><h2 id="技术依赖" tabindex="-1">技术依赖 <a class="header-anchor" href="#技术依赖" aria-label="Permalink to &quot;技术依赖&quot;">​</a></h2><ul><li><a href="https://github.com/browserslist/caniuse-lite" target="_blank" rel="nofollow noopener noreferrer">https://github.com/browserslist/caniuse-lite</a></li><li><a href="https://caniuse.com/" target="_blank" rel="nofollow noopener noreferrer">https://caniuse.com/</a></li></ul>`,10),o=[l];function r(n,p,h,c,d,b){return t(),e("div",null,o)}const g=s(i,[["render",r]]);export{k as __pageData,g as default};
