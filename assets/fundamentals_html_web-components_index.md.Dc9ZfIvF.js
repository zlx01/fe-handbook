import{_ as e,c as o,o as t,a4 as l}from"./chunks/framework.CFdyflnk.js";const b=JSON.parse('{"title":"Web Components","description":"","frontmatter":{},"headers":[],"relativePath":"fundamentals/html/web-components/index.md","filePath":"fundamentals/html/web-components/index.md","lastUpdated":1726577403000}'),a={name:"fundamentals/html/web-components/index.md"},n=l('<h1 id="web-components" tabindex="-1">Web Components <a class="header-anchor" href="#web-components" aria-label="Permalink to &quot;Web Components&quot;">​</a></h1><ul><li>official site: <a href="https://www.webcomponents.org" target="_blank" rel="nofollow noopener noreferrer">https://www.webcomponents.org</a></li><li>MDN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components" target="_blank" rel="nofollow noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/Web_Components</a></li></ul><h2 id="三大技术" tabindex="-1">三大技术 <a class="header-anchor" href="#三大技术" aria-label="Permalink to &quot;三大技术&quot;">​</a></h2><ul><li><strong>Custom Elements</strong>：一组 JavaScript API，自定义html元素的行为</li><li><strong>Shadow DOM</strong>：一组 JavaScript API，用于封装一个元素的样式和结构，使其不受外部css影响，自带scoped</li><li><strong>HTML template</strong>：<code>&lt;template&gt;</code> 元素，用于存放html模板，不会被渲染，<code>&lt;slot&gt;</code> 元素，用于插入模板内容</li></ul><h3 id="custom-elements" tabindex="-1">Custom Elements <a class="header-anchor" href="#custom-elements" aria-label="Permalink to &quot;Custom Elements&quot;">​</a></h3><ul><li>类式写法，继承现有的HTML元素类</li><li>重点是定义各个生命周期回调</li><li>使用前需要注册，<code>customElements.define(&#39;my-element&#39;, MyElement);</code></li><li><code>attributeChangedCallback</code> 可以监听属性变化</li></ul><h3 id="shadow-dom" tabindex="-1">Shadow DOM <a class="header-anchor" href="#shadow-dom" aria-label="Permalink to &quot;Shadow DOM&quot;">​</a></h3><ul><li><p><strong>Shadow host</strong>: 影子 DOM 附加到的常规 DOM 节点。</p></li><li><p><strong>Shadow tree</strong>: 影子 DOM 内部的 DOM 树。</p></li><li><p><strong>Shadow boundary</strong>: 影子 DOM 终止，常规 DOM 开始的地方。</p></li><li><p><strong>Shadow root</strong>: 影子树的根节点。</p></li><li><p>通过 <code>attachShadow</code> 方法创建</p></li><li><p>可以通过配置mode来允许页面js访问shadow dom</p></li></ul><h2 id="web-components的优势" tabindex="-1">Web Components的优势 <a class="header-anchor" href="#web-components的优势" aria-label="Permalink to &quot;Web Components的优势&quot;">​</a></h2><ul><li>标准化，原生支持</li><li>封装性，隔离性</li><li>跨框架兼容</li></ul><h2 id="为什么不推荐使用web-components" tabindex="-1">为什么不推荐使用Web Components <a class="header-anchor" href="#为什么不推荐使用web-components" aria-label="Permalink to &quot;为什么不推荐使用Web Components&quot;">​</a></h2><ul><li>兼容性问题</li><li>复杂的状态管理、生命周期管理、事件处理</li><li>性能优化</li><li>响应式系统</li><li>声明式UI</li><li>生态系统</li></ul><h2 id="使用现状" tabindex="-1">使用现状 <a class="header-anchor" href="#使用现状" aria-label="Permalink to &quot;使用现状&quot;">​</a></h2><ul><li>头部案例：Twitter、YouTube、GitHub</li><li>基础/组件库：<a href="https://github.com/lit/lit/" target="_blank" rel="nofollow noopener noreferrer">lit</a> <a href="https://github.com/Tencent/omi" target="_blank" rel="nofollow noopener noreferrer">omi</a></li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://www.cnblogs.com/zhoulujun/p/17972261" target="_blank" rel="nofollow noopener noreferrer">https://www.cnblogs.com/zhoulujun/p/17972261</a></li><li><a href="https://developer.jdcloud.com/article/3706" target="_blank" rel="nofollow noopener noreferrer">https://developer.jdcloud.com/article/3706</a></li><li><a href="https://www.albertaz.com/blog/web-components-ststus" target="_blank" rel="nofollow noopener noreferrer">https://www.albertaz.com/blog/web-components-ststus</a></li></ul>',16),r=[n];function i(s,h,c,d,m,p){return t(),o("div",null,r)}const w=e(a,[["render",i]]);export{b as __pageData,w as default};
