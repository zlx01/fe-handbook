import{_ as e,c as r,o as l,d as i}from"./app.1bfde456.js";const a="/fe-handbook/assets/2020070523132367.346929e1.png",d="/fe-handbook/assets/20200705231430822.a385e5cf.png",t="/fe-handbook/assets/20200705231521653.b0fab999.png",o="/fe-handbook/assets/8c3d493baf09498a8e4b865cbb9ea0a7.21423829.png",m=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是Docker？","slug":"什么是docker","link":"#什么是docker","children":[]},{"level":2,"title":"虚拟化技术","slug":"虚拟化技术","link":"#虚拟化技术","children":[]},{"level":2,"title":"容器技术","slug":"容器技术","link":"#容器技术","children":[]},{"level":2,"title":"docker与虚拟机的比较","slug":"docker与虚拟机的比较","link":"#docker与虚拟机的比较","children":[]},{"level":2,"title":"为什么需要docker？","slug":"为什么需要docker","link":"#为什么需要docker","children":[]},{"level":2,"title":"docker在DevOps（开发/运维）中的优势？","slug":"docker在devops-开发-运维-中的优势","link":"#docker在devops-开发-运维-中的优势","children":[]},{"level":2,"title":"docker架构","slug":"docker架构","link":"#docker架构","children":[]},{"level":2,"title":"相关概念","slug":"相关概念","link":"#相关概念","children":[]},{"level":2,"title":"镜像的命名规则","slug":"镜像的命名规则","link":"#镜像的命名规则","children":[]},{"level":2,"title":"容器的状态","slug":"容器的状态","link":"#容器的状态","children":[]}],"relativePath":"server/DevOps/docker/index.md","lastUpdated":1681663861000}'),c={name:"server/DevOps/docker/index.md"},n=i('<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-hidden="true">#</a></h1><p>&quot;Debug your app, not your environment.&quot; &quot;Develop faster. Run anywhere.&quot;</p><h2 id="什么是docker" tabindex="-1">什么是Docker？ <a class="header-anchor" href="#什么是docker" aria-hidden="true">#</a></h2><ul><li>应用容器引擎</li><li>官网：<a href="https://www.docker.com/" target="_blank" rel="noreferrer">https://www.docker.com/</a></li><li>官方文档：<a href="https://docs.docker.com/" target="_blank" rel="noreferrer">https://docs.docker.com/</a></li><li>官方的公开镜像仓库：<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">https://hub.docker.com/</a> <a href="http://dockerhub.com/" target="_blank" rel="noreferrer">http://dockerhub.com/</a> 301 Moved Permanently</li></ul><h2 id="虚拟化技术" tabindex="-1">虚拟化技术 <a class="header-anchor" href="#虚拟化技术" aria-hidden="true">#</a></h2><ul><li>将计算机的各种硬件资源，例如CPU、内存、磁盘以及网络等，看做资源池，系统管理员可以对其进行重新分配，而不用考虑底层物理硬件</li><li>虚拟化技术解决的问题：1.高性能计算机硬件的产能过剩；2.把老旧的计算机硬件重新组合，作为一个整体的资源来用，化零为整。</li><li>Linux平台的虚拟化产品：KVM，Xen，VMWare，VirtualBox</li><li>Windows平台的虚拟化产品：Hyper V，VMWare，VirtualBox</li><li>虚拟化系统可以在宿主机上虚拟化出一套完整的硬件基础设施，配以操作系统，相当于虚拟出一台计算机</li><li>虚拟机对底层系统来说，就是一个文件。</li><li>虚拟机之间是相互隔离的。</li><li>虚拟化技术的缺点：资源占用多，一个虚拟机实例需要完整的操作系统及其附属应用，实际可能只需要部分功能和应用；冗余步骤多，启动慢</li></ul><h2 id="容器技术" tabindex="-1">容器技术 <a class="header-anchor" href="#容器技术" aria-hidden="true">#</a></h2><ul><li>容器，是一种轻量级的操作系统级的虚拟化，可以让用户在一个资源隔离的进程中运行应用及其依赖项。运行应用程序所必须的组件都讲打包成一个镜像并可以复用。</li></ul><h2 id="docker与虚拟机的比较" tabindex="-1">docker与虚拟机的比较 <a class="header-anchor" href="#docker与虚拟机的比较" aria-hidden="true">#</a></h2><p><img src="'+a+'" alt="在这里插入图片描述"><img src="'+d+'" alt="在这里插入图片描述"></p><h2 id="为什么需要docker" tabindex="-1">为什么需要docker？ <a class="header-anchor" href="#为什么需要docker" aria-hidden="true">#</a></h2><ul><li>解决的问题：开发环境和生产环境的一致性（依赖，版本，配置，网络。。。）</li><li>跨平台容易，方便部署，扩展，迁移。</li><li>一次构建、随处运行（<strong>Build once，Run everywhere</strong>）</li><li>举例：一般通过LAMP搭建网站时，往往需要很多配置环境的操作，当迁移系统到其他云平台时，需要重新部署和调试，而有了容器技术来打包应用，迁移系统就变得在新的云平台上启动容器那么简单了</li></ul><h2 id="docker在devops-开发-运维-中的优势" tabindex="-1">docker在DevOps（开发/运维）中的优势？ <a class="header-anchor" href="#docker在devops-开发-运维-中的优势" aria-hidden="true">#</a></h2><ul><li>敏捷：更快速的交付和部署</li><li>提高生产力：容器可以看做一个微服务，容器之间相互独立，可以独立升级，避免跨服务的依赖和冲突</li><li>节省资源：不需要额外的虚拟化管理程序支持</li><li>安全：容器之间的进程是相互隔离的（使用沙箱技术）</li></ul><h2 id="docker架构" tabindex="-1">docker架构 <a class="header-anchor" href="#docker架构" aria-hidden="true">#</a></h2><p><img src="'+t+'" alt="在这里插入图片描述"> Docker Engine <img src="'+o+'" alt="在这里插入图片描述"></p><h2 id="相关概念" tabindex="-1">相关概念 <a class="header-anchor" href="#相关概念" aria-hidden="true">#</a></h2><ul><li>镜像(Image)：软件打包好的镜像</li><li>容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</li><li>仓库(Registry)：用来保存各种打包好的软件镜像</li><li>一个容器就是一个独立的虚拟操作系统，互不影响，而镜像就是这个操作系统的安装包</li><li>类似面向对象程序设计中的类和实例，镜像是静态的定义，容器是镜像运行时的实体</li><li>镜像本身是可读的，启动镜像时，Docker会在镜像的最上一层创建一个可写层</li></ul><h2 id="镜像的命名规则" tabindex="-1">镜像的命名规则 <a class="header-anchor" href="#镜像的命名规则" aria-hidden="true">#</a></h2><ul><li>镜像名包括命名空间和仓库名</li><li>标签用于区分不同版本的镜像</li></ul><h2 id="容器的状态" tabindex="-1">容器的状态 <a class="header-anchor" href="#容器的状态" aria-hidden="true">#</a></h2><ul><li>已创建（created）、重启中（restarting）、运行中（running）、已暂停（paused）和已退出（exited）</li><li>容器可以被创建、启动、运行、停止、删除、暂停</li></ul>',22),h=[n];function s(k,u,p,_,f,g){return l(),r("div",null,h)}const v=e(c,[["render",s]]);export{m as __pageData,v as default};
