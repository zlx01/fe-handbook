import{_ as i,c as s,o as a,a4 as t}from"./chunks/framework.CFdyflnk.js";const l="/fe-handbook/assets/HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE.BPTPG3rW.png",u=JSON.parse('{"title":"HTML","description":"","frontmatter":{},"headers":[],"relativePath":"fundamentals/html/index.md","filePath":"fundamentals/html/index.md","lastUpdated":1727024381000}'),n={name:"fundamentals/html/index.md"},e=t(`<h1 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h1><h2 id="what" tabindex="-1">What <a class="header-anchor" href="#what" aria-label="Permalink to &quot;What&quot;">​</a></h2><ul><li>Hypertext Markup Language</li><li>超文本标记语言</li></ul><h2 id="tutorial" tabindex="-1">Tutorial <a class="header-anchor" href="#tutorial" aria-label="Permalink to &quot;Tutorial&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML" target="_blank" rel="nofollow noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/HTML</a></li><li><a href="https://wangdoc.com/html/index.html" target="_blank" rel="nofollow noopener noreferrer">https://wangdoc.com/html/index.html</a></li></ul><h2 id="history" tabindex="-1">History <a class="header-anchor" href="#history" aria-label="Permalink to &quot;History&quot;">​</a></h2><ul><li>1993-06 first version</li><li>2014-10 H5</li></ul><h2 id="hello-world" tabindex="-1">Hello World <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;Hello World&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello World!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Hello world!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="glossary" tabindex="-1">Glossary <a class="header-anchor" href="#glossary" aria-label="Permalink to &quot;Glossary&quot;">​</a></h2><ul><li>Tag（标签）</li><li>Element（元素）</li><li>Attribute（属性）</li></ul><h2 id="common-tags" tabindex="-1">Common tags <a class="header-anchor" href="#common-tags" aria-label="Permalink to &quot;Common tags&quot;">​</a></h2><ul><li>Text: div, span, p, br, hr</li><li>List: ol, ul, li</li><li>Image: img</li><li>Link: link, script, noscript, a</li><li>Media: video, audio</li><li>Table: table, thead, tbody, tfoot, th, tr, td</li><li>Form: form, label, input, button, textarea</li><li>Iframe: iframe</li><li>&quot;block-level&quot; elements: div, p</li><li>&quot;inline&quot; elements: span, img, a</li></ul><p><img src="`+l+`" alt="HTML常用标签"></p><h3 id="doctype" tabindex="-1"><strong><code>&lt;!doctype&gt;</code></strong> <a class="header-anchor" href="#doctype" aria-label="Permalink to &quot;**\`&lt;!doctype&gt;\`**&quot;">​</a></h3><p>有些面经一直介绍这玩意相关的<strong>怪异模式和标准模式</strong>，了解即可，IE早已入土为安。</p><h3 id="html-1" tabindex="-1">&lt;html&gt; <a class="header-anchor" href="#html-1" aria-label="Permalink to &quot;\\&lt;html&gt;&quot;">​</a></h3><ul><li><p>应用1：设置<strong>font-size</strong>作为基本字体大小，打包时再配合css处理插件<strong>将px转成rem</strong>，以此实现<strong>页面自适应</strong>，移动端页面常用。</p></li><li><p>应用2：设置class或data-theme，配合CSS样式（变量、权重、优先级）实现<strong>主题色切换</strong>功能；具体例子可以打开vue官方文档，F12看下。</p></li></ul><h3 id="style" tabindex="-1">&lt;style&gt; <a class="header-anchor" href="#style" aria-label="Permalink to &quot;\\&lt;style&gt;&quot;">​</a></h3><p>设置全局样式。配合css预处理器才能发挥更大作用，后面css部分再介绍。</p><h3 id="link" tabindex="-1"><a href="./link.html">&lt;link&gt;</a> <a class="header-anchor" href="#link" aria-label="Permalink to &quot;[\\&lt;link&gt;](./link)&quot;">​</a></h3><h3 id="div-、-span" tabindex="-1">&lt;div&gt;、&lt;span&gt; <a class="header-anchor" href="#div-、-span" aria-label="Permalink to &quot;\\&lt;div&gt;、\\&lt;span&gt;&quot;">​</a></h3><p>分别是<strong>块级元素</strong>和<strong>行内元素</strong>的扛把子，div应该使用的最多的元素了，一做<strong>布局</strong>、二做<strong>容器</strong>。</p><p>有些开发者喜欢div一把梭，知乎有把div当button的讨论，推荐围观。原因有很多，一个需求<strong>UI复杂</strong>，用原生button难以实现；还有更重要的一点是button有<strong>浏览器实现的差异</strong>，需要更多代码去抹平。现在用框架基本是<strong>组件化</strong>开发，组件名“代替”了“<strong>语义化</strong>”，不过在某些场景下，语义化还是有必要的，后面的笔记讨论。</p><h3 id="ol-、-ul-、-li" tabindex="-1">&lt;ol&gt;、&lt;ul&gt;、&lt;li&gt; <a class="header-anchor" href="#ol-、-ul-、-li" aria-label="Permalink to &quot;\\&lt;ol&gt;、\\&lt;ul&gt;、\\&lt;li&gt;&quot;">​</a></h3><p>浏览器自带样式，语义化场景下建议使用，需要<strong>清空默认样式（指示符，内外边距）</strong></p><h3 id="img" tabindex="-1"><a href="./img.html">&lt;img&gt;</a> <a class="header-anchor" href="#img" aria-label="Permalink to &quot;[\\&lt;img&gt;](./img)&quot;">​</a></h3><h3 id="a" tabindex="-1"><a href="./a.html">&lt;a&gt;</a> <a class="header-anchor" href="#a" aria-label="Permalink to &quot;[\\&lt;a&gt;](./a)&quot;">​</a></h3><h3 id="noscript" tabindex="-1">&lt;noscript&gt; <a class="header-anchor" href="#noscript" aria-label="Permalink to &quot;\\&lt;noscript&gt;&quot;">​</a></h3><ul><li>用于在<strong>不支持脚本</strong>或<strong>禁用脚本</strong>的情况下显示替代内容，例如提示用户开启脚本功能，或者显示一些静态内容。</li><li>这个标签还是在学习vue的时候第一次遇到。</li></ul><h3 id="form" tabindex="-1"><a href="./form.html">&lt;form&gt;</a> <a class="header-anchor" href="#form" aria-label="Permalink to &quot;[\\&lt;form&gt;](./form)&quot;">​</a></h3><h3 id="table-、-tr-、-td" tabindex="-1">&lt;table&gt;、&lt;tr&gt;、&lt;td&gt; <a class="header-anchor" href="#table-、-tr-、-td" aria-label="Permalink to &quot;\\&lt;table&gt;、\\&lt;tr&gt;、\\&lt;td&gt;&quot;">​</a></h3><p>用于展示<strong>表格数据</strong>，不要用于布局。很少直接用原生的table标签，通常会用到一些UI库的表格组件。</p><h3 id="audio-video" tabindex="-1">&lt;audio&gt; &lt;video&gt; <a class="header-anchor" href="#audio-video" aria-label="Permalink to &quot;\\&lt;audio&gt; \\&lt;video&gt;&quot;">​</a></h3><ul><li>属性不多，能满足基本的播放需求。只是通常都不能业务要求的视觉样式、交互逻辑，需要结合css、js来处理，例如自定义进度条，倍速播放等等。</li><li>音视频处理这一块的知识深挖还挺复杂的，自研成本较高的话可以考虑使用一些成熟的、开源的播放器。</li><li>实践过程还会发现一些坑：例如safari禁止音视频自动播放的问题、视频编码格式不支持、视频预加载失败等问题，只能拿真机、查文档慢慢调试了。。。</li></ul><h3 id="iframe" tabindex="-1"><a href="./iframe.html">&lt;iframe&gt;</a> <a class="header-anchor" href="#iframe" aria-label="Permalink to &quot;[\\&lt;iframe&gt;](./iframe)&quot;">​</a></h3><h2 id="url-encoding" tabindex="-1">URL encoding <a class="header-anchor" href="#url-encoding" aria-label="Permalink to &quot;URL encoding&quot;">​</a></h2><p>url合法字符：</p><ul><li>26个英语字母（包括大写和小写）</li><li>10个阿拉伯数字</li><li>连词号（<code>-</code>）</li><li>句点（<code>.</code>）</li><li>下划线（<code>_</code>）</li></ul><p>其他字符转义方法：使用这些字符的十六进制 UTF-8 编码，每两位算作一组，然后每组头部添加百分号（<code>%</code>）。</p><h2 id="character-encoding" tabindex="-1">Character encoding <a class="header-anchor" href="#character-encoding" aria-label="Permalink to &quot;Character encoding&quot;">​</a></h2><ul><li>数字表示法，<code>&amp;#字符的码点</code></li><li>实体表示法 👍 <code>&amp;amp;</code> <code>&amp;nbsp;</code> <code>&amp;lt;</code> <code>&amp;gt;</code></li></ul><h2 id="data-xxx-属性" tabindex="-1">data-xxx 属性 <a class="header-anchor" href="#data-xxx-属性" aria-label="Permalink to &quot;data-xxx 属性&quot;">​</a></h2><p>存放额外数据</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is the div content&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-tip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tip...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;内容：&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data-role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mobile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.test:after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">attr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test.dataset)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test.dataset.content)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test.dataset.tip)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test.dataset).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DOMStringMap</span></span></code></pre></div>`,47),h=[e];function r(p,k,o,d,g,E){return a(),s("div",null,h)}const y=i(n,[["render",r]]);export{u as __pageData,y as default};
