import{_ as e,c as a,o as t,a4 as o}from"./chunks/framework.CFdyflnk.js";const u=JSON.parse('{"title":"伪元素","description":"","frontmatter":{},"headers":[],"relativePath":"fundamentals/css/pesudo-element.md","filePath":"fundamentals/css/pesudo-element.md","lastUpdated":1726577403000}'),r={name:"fundamentals/css/pesudo-element.md"},l=o('<h1 id="伪元素" tabindex="-1">伪元素 <a class="header-anchor" href="#伪元素" aria-label="Permalink to &quot;伪元素&quot;">​</a></h1><ul><li>::before</li><li>::after</li></ul><h2 id="before-after" tabindex="-1">::before ::after <a class="header-anchor" href="#before-after" aria-label="Permalink to &quot;::before  ::after&quot;">​</a></h2><blockquote><p>由 ::before 和 ::after 伪元素生成的盒子，就好像它们是应用它们的元素或“原始元素（originating element）”的直接子元素一样，因此不能应用在替换元素上，比如 <img> 元素，其内容不在 CSS 格式化模型的范围内。</p></blockquote><p>可替换元素：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element" target="_blank" rel="nofollow noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element</a></p>',5),n=[l];function s(d,c,i,_,f,p){return t(),a("div",null,n)}const h=e(r,[["render",s]]);export{u as __pageData,h as default};
