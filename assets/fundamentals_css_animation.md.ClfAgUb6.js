import{_ as t,c as a,o as d,a4 as n}from"./chunks/framework.CFdyflnk.js";const b=JSON.parse('{"title":"Animation","description":"","frontmatter":{},"headers":[],"relativePath":"fundamentals/css/animation.md","filePath":"fundamentals/css/animation.md","lastUpdated":1727024381000}'),r={name:"fundamentals/css/animation.md"},e=n('<h1 id="animation" tabindex="-1">Animation <a class="header-anchor" href="#animation" aria-label="Permalink to &quot;Animation&quot;">​</a></h1><table tabindex="0"><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>animation-name</td><td></td><td>要对当前元素生效的关键帧的名字</td></tr><tr><td>animation-duration</td><td></td><td>动画的执行时间</td></tr><tr><td>animation-delay</td><td></td><td>动画的延时</td></tr><tr><td>animation-timing-function</td><td>ease-in-out</td><td>过渡时序</td></tr><tr><td>animation-iteration-count</td><td>infinite</td><td></td></tr><tr><td>animation-direction</td><td>normal 默认值 从 from 向 to运行 每次都是这样 <br>reverse 从 to 向 from 运行 每次都是这样 <br>alternate 从 from 向 to运行 重复执行动画时反向执行<br>alternate-reverse 从 to 向 from运行 重复执行动画时反向执行</td><td>指定动画运行的方向</td></tr><tr><td>animation-play-state</td><td>running 默认值 动画执行<br>paused 动画暂停</td><td>设置动画的执行状态</td></tr><tr><td>animation-fill-mode</td><td>none 默认值 动画执行完毕元素回到原来位置<br>forwards 动画执行完毕元素会停止在动画结束的位置<br>backwards 动画延时等待时，元素就会处于开始位置<br>both 结合了forwards 和 backwards</td><td>动画的填充模式</td></tr><tr><td>@keyframes</td><td>from表示动画的开始位置 也可以使用 0%<br>to动画的结束位置 也可以使用100%</td><td>设置动画效果，必须先要设置一个关键帧，关键帧设置了动画执行每一个步骤</td></tr></tbody></table>',2),o=[e];function i(s,m,c,_,l,f){return d(),a("div",null,o)}const u=t(r,[["render",i]]);export{b as __pageData,u as default};
