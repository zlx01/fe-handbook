import{_ as e,c as t,o as n,a4 as r}from"./chunks/framework.luo6lmAI.js";const f=JSON.parse('{"title":"判断元素是否在视窗内","description":"","frontmatter":{},"headers":[],"relativePath":"fundamentals/js/practice/intersection-detection.md","filePath":"fundamentals/js/practice/intersection-detection.md","lastUpdated":1711215353000}'),o={name:"fundamentals/js/practice/intersection-detection.md"},a=r('<h1 id="判断元素是否在视窗内" tabindex="-1">判断元素是否在视窗内 <a class="header-anchor" href="#判断元素是否在视窗内" aria-label="Permalink to &quot;判断元素是否在视窗内&quot;">​</a></h1><h2 id="element-getboundingclientrect" tabindex="-1">Element.getBoundingClientRect() <a class="header-anchor" href="#element-getboundingclientrect" aria-label="Permalink to &quot;Element.getBoundingClientRect()&quot;">​</a></h2><ul><li>监听滚动事件，获取元素坐标，与视口尺寸比较</li><li>频繁触发，性能差</li></ul><h2 id="intersectionobserver-api" tabindex="-1">IntersectionObserver API <a class="header-anchor" href="#intersectionobserver-api" aria-label="Permalink to &quot;IntersectionObserver API&quot;">​</a></h2><ul><li>注册监听元素交叉监听事件</li><li>利用浏览器空闲时段触发，性能好</li></ul><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903788914933774" target="_blank" rel="nofollow noopener noreferrer">https://juejin.cn/post/6844903788914933774</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect" target="_blank" rel="nofollow noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank" rel="nofollow noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API</a></li></ul>',7),i=[a];function l(c,s,d,h,_,p){return n(),t("div",null,i)}const m=e(o,[["render",l]]);export{f as __pageData,m as default};
