import{_ as l,c as a,o as e,d as s}from"./app.ab3bd27a.js";const n="/fe-handbook/assets/this绑定问题.a618a93e.png",F=JSON.parse('{"title":"React","description":"","frontmatter":{},"headers":[{"level":2,"title":"Resources","slug":"resources","link":"#resources","children":[]},{"level":2,"title":"Why","slug":"why","link":"#why","children":[]},{"level":2,"title":"How","slug":"how","link":"#how","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[{"level":3,"title":"JSX","slug":"jsx","link":"#jsx","children":[]},{"level":3,"title":"类式组件","slug":"类式组件","link":"#类式组件","children":[]},{"level":3,"title":"函数式组件（推荐）","slug":"函数式组件-推荐","link":"#函数式组件-推荐","children":[]},{"level":3,"title":"props属性","slug":"props属性","link":"#props属性","children":[]},{"level":3,"title":"state属性","slug":"state属性","link":"#state属性","children":[]},{"level":3,"title":"refs属性","slug":"refs属性","link":"#refs属性","children":[]},{"level":3,"title":"事件处理","slug":"事件处理","link":"#事件处理","children":[]},{"level":3,"title":"条件渲染","slug":"条件渲染","link":"#条件渲染","children":[]},{"level":3,"title":"列表和key","slug":"列表和key","link":"#列表和key","children":[]},{"level":3,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":3,"title":"表单","slug":"表单","link":"#表单","children":[]}]},{"level":2,"title":"高级指引","slug":"高级指引","link":"#高级指引","children":[{"level":3,"title":"组件通信","slug":"组件通信","link":"#组件通信","children":[]}]},{"level":2,"title":"","slug":"","link":"#","children":[{"level":3,"title":"context","slug":"context","link":"#context","children":[]},{"level":3,"title":"hooks","slug":"hooks","link":"#hooks","children":[]},{"level":3,"title":"Ajax","slug":"ajax","link":"#ajax","children":[]}]},{"level":2,"title":"路由","slug":"路由","link":"#路由","children":[]},{"level":2,"title":"虚拟DOM","slug":"虚拟dom","link":"#虚拟dom","children":[{"level":3,"title":"diffing算法","slug":"diffing算法","link":"#diffing算法","children":[]}]},{"level":2,"title":"部署","slug":"部署","link":"#部署","children":[]}],"relativePath":"framework/react/index.md","lastUpdated":1691335172000}'),t={name:"framework/react/index.md"},o=s(`<h1 id="react" tabindex="-1"><a href="https://react.dev/" target="_blank" rel="nofollow noopener noreferrer">React</a> <a class="header-anchor" href="#react" aria-hidden="true">#</a></h1><ul><li>A JavaScript library for building user interfaces</li><li>一个用于构建用户界面的渐进式 JavaScript 库</li><li>MVC中的view层</li></ul><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-hidden="true">#</a></h2><ul><li><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="nofollow noopener noreferrer">https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></li><li><a href="https://create-react-app.dev/" target="_blank" rel="nofollow noopener noreferrer">https://create-react-app.dev/</a></li><li><a href="https://www.reactiflux.com/" target="_blank" rel="nofollow noopener noreferrer">https://www.reactiflux.com/</a></li><li><a href="https://snack.expo.dev/" target="_blank" rel="nofollow noopener noreferrer">https://snack.expo.dev/</a></li><li><a href="https://ahooks.js.org/zh-CN/" target="_blank" rel="nofollow noopener noreferrer">https://ahooks.js.org/zh-CN/</a></li><li><a href="https://react-typescript-cheatsheet.netlify.app/" target="_blank" rel="nofollow noopener noreferrer">https://react-typescript-cheatsheet.netlify.app/</a></li><li><a href="https://piotrwitek.github.io/react-redux-typescript-guide/" target="_blank" rel="nofollow noopener noreferrer">https://piotrwitek.github.io/react-redux-typescript-guide/</a></li><li><a href="https://transform.tools/html-to-jsx" target="_blank" rel="nofollow noopener noreferrer">https://transform.tools/html-to-jsx</a></li></ul><h2 id="why" tabindex="-1">Why <a class="header-anchor" href="#why" aria-hidden="true">#</a></h2><ul><li>操作原生DOM太繁琐，效率低下</li></ul><h2 id="how" tabindex="-1">How <a class="header-anchor" href="#how" aria-hidden="true">#</a></h2><ul><li><p>虚拟DOM，diffing算法</p></li><li><p>声明式编码 -&gt; 命令式编码</p></li><li><p>模块化 -&gt; 组件化</p></li></ul><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-hidden="true">#</a></h2><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://cdn.bootcdn.net/ajax/libs/react/17.0.1/umd/react.development.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://cdn.bootcdn.net/ajax/libs/react-dom/17.0.1/umd/react-dom.development.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://cdn.bootcdn.net/ajax/libs/babel-standalone/7.0.0-beta.3/babel.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">react-app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-app</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># OR</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">react-app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-app</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># OR</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># OR</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用 ts</span></span>
<span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create-react-app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--template</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">typescript</span></span>
<span class="line"></span></code></pre></div><h2 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-hidden="true">#</a></h2><h3 id="jsx" tabindex="-1">JSX <a class="header-anchor" href="#jsx" aria-hidden="true">#</a></h3><ul><li><p>JavaScript XML</p></li><li><p>A syntax extension to JavaScript.</p></li><li><p>在HTML中写JavaScript</p></li><li><p>Babel 会把 JSX 转译成一个名为 React.createElement() 函数调用。</p></li><li><p>组件化使用 jsx 而不是模板</p></li><li><p>规则：</p><ul><li>只能有一个根元素，可以用根标签 &lt;&gt;...&lt;/&gt;</li><li>标签必须闭合</li><li>小写字母开头，则认为是元素，大写字母开头，则认为是组件</li><li>className={} onClick={} style={</li></ul></li><li><p>JSX 防止注入攻击</p><blockquote><p>React DOM 在渲染所有输入内容之前，默认会进行<a href="https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html" target="_blank" rel="nofollow noopener noreferrer">转义</a>。它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="nofollow noopener noreferrer">XSS（cross-site-scripting, 跨站脚本）</a>攻击。</p></blockquote></li></ul><h3 id="类式组件" tabindex="-1">类式组件 <a class="header-anchor" href="#类式组件" aria-hidden="true">#</a></h3><ul><li>类似JavaScript函数，它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素。</li><li>组件由元素构成。</li><li>组件名称必须以大写字母开头。</li><li>React 会将以小写字母开头的组件视为原生 DOM 标签。</li><li>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。纯函数：函数不会尝试更改入参，且多次调用下相同的入参始终返回相同的结果。</li></ul><h3 id="函数式组件-推荐" tabindex="-1">函数式组件（推荐） <a class="header-anchor" href="#函数式组件-推荐" aria-hidden="true">#</a></h3><ul><li><p>只能用props</p></li><li><p>借助hook使用state</p></li></ul><h3 id="props属性" tabindex="-1">props属性 <a class="header-anchor" href="#props属性" aria-hidden="true">#</a></h3><ul><li>给组件传递数据：基本类型、对象、函数、组件（react没有槽的概念）</li><li>校验：类型、必要性、默认值</li><li>只读，不可修改</li></ul><h3 id="state属性" tabindex="-1">state属性 <a class="header-anchor" href="#state属性" aria-hidden="true">#</a></h3><ul><li><p>组件私有状态</p></li><li><p>初始化方式</p><ul><li>constructor</li><li>public class fields syntax</li></ul></li><li><p>浅合并更新</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 依赖于旧state</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></li><li><p>state改变，组件重新渲染，render方法被调用</p></li><li><p>“自上而下”或是“单向”的数据流。任何的 state 总是所属于特定的组件，而且从该 state 派生的任何数据或 UI 只能影响树中“低于”它们的组件。</p></li></ul><h3 id="refs属性" tabindex="-1">refs属性 <a class="header-anchor" href="#refs属性" aria-hidden="true">#</a></h3><h3 id="事件处理" tabindex="-1">事件处理 <a class="header-anchor" href="#事件处理" aria-hidden="true">#</a></h3><ul><li><p>this绑定问题</p><p><img src="`+n+`" alt="this绑定问题"></p></li><li><p>向事件处理程序传递参数</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">deleteRow</span><span style="color:#A6ACCD;">(id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> e)</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">Delete Row</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={this.</span><span style="color:#A6ACCD;">deleteRow</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#A6ACCD;"> id)</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">Delete Row</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div></li><li><p>阻止默认行为：return false没用，必须显式调用 e.preventDefault()</p></li><li><p>约定：事件处理函数名使用小写驼峰</p></li></ul><h3 id="条件渲染" tabindex="-1">条件渲染 <a class="header-anchor" href="#条件渲染" aria-hidden="true">#</a></h3><ul><li>if</li><li>三目运算符</li><li>与运算符（不需要else的话）</li><li>阻止组件渲染：让 render 方法直接返回 null，而不进行任何渲染。</li></ul><h3 id="列表和key" tabindex="-1">列表和key <a class="header-anchor" href="#列表和key" aria-hidden="true">#</a></h3><ul><li>在 map() 方法中的元素需要设置 key 属性</li><li>注意： <ul><li>尽量不要使用索引作为key</li><li>没有指定key时，react会使用索引作为key</li></ul></li></ul><h3 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-hidden="true">#</a></h3><table><thead><tr><th>阶段</th><th>任务</th></tr></thead><tbody><tr><td>componentDidMount</td><td>发送网络请求、开启定时器</td></tr><tr><td>componentWillUnmount</td><td>闭定时器</td></tr></tbody></table><h3 id="表单" tabindex="-1">表单 <a class="header-anchor" href="#表单" aria-hidden="true">#</a></h3><ul><li>受控组件 <ul><li>组件的值受控于state，同时用户输入触发state变更</li><li>受控输入空值</li></ul></li><li>非受控组件 <ul><li>state与组件的值不同步</li></ul></li></ul><h2 id="高级指引" tabindex="-1">高级指引 <a class="header-anchor" href="#高级指引" aria-hidden="true">#</a></h2><h3 id="组件通信" tabindex="-1">组件通信 <a class="header-anchor" href="#组件通信" aria-hidden="true">#</a></h3><ul><li>组件之间的关系：父子、兄弟、祖孙</li><li>通信方式： <ul><li>props(children,render)；</li><li>pub-sb：消息订阅发布</li><li>redux：集中式</li><li>context：生产者、消费者模式</li></ul></li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><h3 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-hidden="true">#</a></h3><h3 id="hooks" tabindex="-1">hooks <a class="header-anchor" href="#hooks" aria-hidden="true">#</a></h3><h3 id="ajax" tabindex="-1">Ajax <a class="header-anchor" href="#ajax" aria-hidden="true">#</a></h3><h2 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-hidden="true">#</a></h2><h2 id="虚拟dom" tabindex="-1">虚拟DOM <a class="header-anchor" href="#虚拟dom" aria-hidden="true">#</a></h2><ul><li>本质是普通js对象，通过 <code>React.createElement</code> 创建</li><li>虚拟dom比较轻量，没有真实dom那么多的属性</li><li>虚拟dom最终会被转换成真实dom，渲染到页面上</li></ul><h3 id="diffing算法" tabindex="-1">diffing算法 <a class="header-anchor" href="#diffing算法" aria-hidden="true">#</a></h3><h2 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-hidden="true">#</a></h2><ul><li>部署在网站非根路径，修改 <code>package.json</code>， 增加一行 <code>&quot;homepage&quot;: &quot;/react-deploy-gh-pages&quot;,</code></li></ul><p>You can only call Hooks at the top of your components (or other Hooks). Why do multiple JSX tags need to be wrapped?</p><p>JSX looks like HTML, but under the hood it is transformed into plain JavaScript objects. You can’t return two objects from a function without wrapping them into an array. This explains why you also can’t return two JSX tags without wrapping them into another tag or a Fragment.</p>`,48),r=[o];function p(i,c,h,d,y,u){return e(),a("div",null,r)}const f=l(t,[["render",p]]);export{F as __pageData,f as default};
