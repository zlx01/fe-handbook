import{_ as e,c as a,o as r,d as n}from"./app.880f4aae.js";const f=JSON.parse('{"title":"version","description":"","frontmatter":{},"headers":[{"level":2,"title":"SemVer","slug":"semver","link":"#semver","children":[{"level":3,"title":"Reference","slug":"reference","link":"#reference","children":[]}]},{"level":2,"title":"版本锁定","slug":"版本锁定","link":"#版本锁定","children":[]}],"relativePath":"build-tools/package-manager/npm/package.json/version.md","lastUpdated":1696580746000}'),l={name:"build-tools/package-manager/npm/package.json/version.md"},t=n('<h1 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-hidden="true">#</a></h1><h2 id="semver" tabindex="-1"><a href="https://semver.org/" target="_blank" rel="nofollow noopener noreferrer">SemVer</a> <a class="header-anchor" href="#semver" aria-hidden="true">#</a></h2><ul><li>Semantic Versioning</li><li>语义化版本</li><li>MAJOR.MINOR.PATCH <blockquote><p>指定版本：比如 1.2.2 ，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。</p><p>波浪号（tilde）+指定版本：比如 ~1.2.2 ，表示安装 1.2.x 的最新版本（不低于1.2.2），但是不安装 1.3.x，也就是说安装时不改变大版本号和次要版本号。</p><p>插入号（caret）+指定版本：比如 ˆ1.2.2，表示安装 1.x.x 的最新版本（不低于 1.2.2），但是不安装 2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为 0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</p><p><code>npm install [package]</code>，第一次安装是最新版本，写到 <code>package.json</code> 中版本号是插入号形式。</p></blockquote></li></ul><h3 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-hidden="true">#</a></h3><ul><li><a href="https://segmentfault.com/a/1190000039684460" target="_blank" rel="nofollow noopener noreferrer">https://segmentfault.com/a/1190000039684460</a></li></ul><h2 id="版本锁定" tabindex="-1">版本锁定 <a class="header-anchor" href="#版本锁定" aria-hidden="true">#</a></h2><ul><li>package-lock.json</li><li>yarn.lock</li><li>pnpm-lock.yaml</li></ul>',7),o=[t];function i(s,c,d,h,p,_){return r(),a("div",null,o)}const u=e(l,[["render",i]]);export{f as __pageData,u as default};
