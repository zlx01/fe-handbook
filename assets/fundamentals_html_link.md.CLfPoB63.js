import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.C86mscM5.js";const n="/fe-handbook/assets/vue%E5%AE%98%E7%BD%91head.BUPfPO34.png",g=JSON.parse('{"title":"<link>","description":"","frontmatter":{},"headers":[],"relativePath":"fundamentals/html/link.md","filePath":"fundamentals/html/link.md","lastUpdated":1744516180000}'),h={name:"fundamentals/html/link.md"};function e(k,s,p,r,o,d){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="link" tabindex="-1"><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link" target="_blank" rel="nofollow noopener noreferrer">&lt;link&gt;</a> <a class="header-anchor" href="#link" aria-label="Permalink to &quot;[\\&lt;link&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link)&quot;">​</a></h1><ul><li>应用1：引入外部样式</li><li>应用2：设置网站图标</li><li>应用3：<strong>预加载资源，<strong>进行</strong>网站性能优化、提升用户体验</strong>的技巧之一。可以看下vue官网使用案例。</li></ul><h2 id="引入css样式表" tabindex="-1">引入css样式表 <a class="header-anchor" href="#引入css样式表" aria-label="Permalink to &quot;引入css样式表&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><h2 id="media属性" tabindex="-1">media属性 <a class="header-anchor" href="#media属性" aria-label="Permalink to &quot;media属性&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;desktop.css&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  media</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;screen and (min-width: 600px)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span></span></code></pre></div><h2 id="网站图标" tabindex="-1">网站图标 <a class="header-anchor" href="#网站图标" aria-label="Permalink to &quot;网站图标&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/favicon.ico&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/x-icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;apple-touch-icon&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sizes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;180x180&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;apple-touch-icon.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/png&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sizes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;32x32&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;favicon-32x32.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/png&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sizes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;16x16&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;favicon-16x16.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="rel属性" tabindex="-1">rel属性 <a class="header-anchor" href="#rel属性" aria-label="Permalink to &quot;rel属性&quot;">​</a></h2><ul><li><code>rel=&quot;modulepreload&quot;</code>：rel 属性指定了链接资源与当前文档之间的关系。modulepreload 表示预加载 JavaScript 模块，告诉浏览器提前获取并解析该模块，以便在需要使用时能更快地执行，减少等待时间。</li></ul><p>当浏览器解析到 <code>&lt;link rel=&quot;modulepreload&quot; as=&quot;script&quot;&gt;</code> 标签时，会立即开始下载对应的 JavaScript 模块文件，同时并行进行解析，但不会执行该模块。当后续代码中真正需要使用这个模块时，由于它已经被下载和解析好了，就可以直接执行，从而显著提升页面的加载速度和响应性能。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Module Preload Example&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- 预加载 utils.js 模块 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;modulepreload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utils.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 引入预加载的模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { someFunction } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./utils.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在上述示例中，<code>&lt;link rel=&quot;modulepreload&quot; as=&quot;script&quot; href=&quot;utils.js&quot;&gt;</code> 会让浏览器提前下载并解析 utils.js 模块。当 <code>&lt;script type=&quot;module&quot;&gt;</code> 标签中的代码需要引入 utils.js 时，由于该模块已经准备好，就可以立即使用，避免了额外的等待时间。</p><h2 id="预加载" tabindex="-1">预加载 <a class="header-anchor" href="#预加载" aria-label="Permalink to &quot;预加载&quot;">​</a></h2><h3 id="preload" tabindex="-1"><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload" target="_blank" rel="nofollow noopener noreferrer">preload</a> <a class="header-anchor" href="#preload" aria-label="Permalink to &quot;[preload](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload)&quot;">​</a></h3><blockquote><link rel="preload">告诉浏览器尽快下载并缓存资源（如脚本或样式表），该指令优先级较高，浏览器肯定会执行。当加载页面几秒钟后需要该资源时，它会很有用。下载后，浏览器不会对资源执行任何操作，脚本未执行，样式表未应用。它只是缓存，当其他东西需要它时，它立即可用。 </blockquote><h3 id="prefetch" tabindex="-1">prefetch <a class="header-anchor" href="#prefetch" aria-label="Permalink to &quot;prefetch&quot;">​</a></h3><ul><li>只能用于 https</li><li>标识预加载资源，非强制</li></ul><blockquote><p>如果后续的页面需要某个资源，并且希望预加载该资源，以便加速页面渲染。该指令不是强制性的，优先级较低，浏览器不一定会执行。</p></blockquote><h3 id="preconnect" tabindex="-1">preconnect <a class="header-anchor" href="#preconnect" aria-label="Permalink to &quot;preconnect&quot;">​</a></h3><ul><li>要求浏览器提前与某个域名建立 TCP 连接。</li></ul><h3 id="dns-prefetch" tabindex="-1">dns-prefetch <a class="header-anchor" href="#dns-prefetch" aria-label="Permalink to &quot;dns-prefetch&quot;">​</a></h3><ul><li>要求浏览器提前执行某个域名的 DNS 解析。</li></ul><h3 id="prerender" tabindex="-1">prerender <a class="header-anchor" href="#prerender" aria-label="Permalink to &quot;prerender&quot;">​</a></h3><ul><li>要求浏览器加载某个网页，并且提前渲染它。用户点击指向该网页的链接时，就会立即呈现该页面。如果确定用户下一步会访问该页面，这会很有帮助。</li></ul><p><img src="`+n+'" alt="vue官网head"></p><h2 id="crossorigin" tabindex="-1">crossorigin <a class="header-anchor" href="#crossorigin" aria-label="Permalink to &quot;crossorigin&quot;">​</a></h2><h3 id="允许跨域资源共享" tabindex="-1"><strong>允许跨域资源共享</strong> <a class="header-anchor" href="#允许跨域资源共享" aria-label="Permalink to &quot;**允许跨域资源共享**&quot;">​</a></h3><p>当你引入的资源（如 CSS 文件、字体文件等）来自不同的域名时，浏览器会遵循同源策略，对跨域请求进行限制。<code>crossorigin</code> 属性可以帮助你突破这种限制，允许浏览器从其他域名加载资源。它有以下两种取值：</p><h3 id="_1-anonymous" tabindex="-1"><strong>1. <code>anonymous</code></strong> <a class="header-anchor" href="#_1-anonymous" aria-label="Permalink to &quot;**1. `anonymous`**&quot;">​</a></h3><ul><li><strong>作用</strong>：这是一种较为常用的取值。当设置为 <code>anonymous</code> 时，浏览器会发起一个跨域请求，但不会在请求中包含用户的凭证信息（如 cookie、HTTP 认证等）。服务器需要正确配置 CORS 响应头（如 <code>Access-Control-Allow-Origin</code>），以允许跨域请求。</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rel=&quot;stylesheet&quot; href=&quot;&lt;https://example.com/styles</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot; crossorigin=&quot;anonymous&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>• <strong>应用场景</strong>：适用于那些不需要用户凭证信息的跨域资源加载，比如公共的 CSS 库、字体文件等。</p><h3 id="_2-use-credentials" tabindex="-1"><strong>2. <code>use-credentials</code></strong> <a class="header-anchor" href="#_2-use-credentials" aria-label="Permalink to &quot;**2. `use-credentials`**&quot;">​</a></h3><ul><li><strong>作用</strong>：当设置为 <code>use-credentials</code> 时，浏览器会在跨域请求中包含用户的凭证信息。同样，服务器需要配置相应的 CORS 响应头，不仅要允许跨域请求，还要允许携带凭证信息（<code>Access-Control-Allow-Credentials: true</code>）。</li><li><strong>示例</strong>：</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rel=&quot;stylesheet&quot; href=&quot;&lt;https://example.com/styles</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot; crossorigin=&quot;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">use-credentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="配合错误处理" tabindex="-1"><strong>配合错误处理</strong> <a class="header-anchor" href="#配合错误处理" aria-label="Permalink to &quot;**配合错误处理**&quot;">​</a></h3><p><code>crossorigin</code> 属性还能与 JavaScript 的 <code>onerror</code> 事件结合，用于处理跨域资源加载失败的情况。当资源加载失败时，可以通过 <code>onerror</code> 事件执行相应的错误处理逻辑。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rel=&quot;stylesheet&quot; href=&quot;&lt;https://example.com/styles</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      integrity=&quot;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sha384-abcdef1234567890</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      crossorigin=&quot;anonymous&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="对资源完整性验证的影响" tabindex="-1"><strong>对资源完整性验证的影响</strong> <a class="header-anchor" href="#对资源完整性验证的影响" aria-label="Permalink to &quot;**对资源完整性验证的影响**&quot;">​</a></h3><p>在使用 <code>integrity</code> 属性进行子资源完整性（SRI）验证时，<code>crossorigin</code> 属性也起到关键作用。如果要对跨域资源进行完整性验证，就必须设置 <code>crossorigin</code> 属性，否则验证会失败。</p><h2 id="as属性" tabindex="-1">as属性 <a class="header-anchor" href="#as属性" aria-label="Permalink to &quot;as属性&quot;">​</a></h2><ul><li><strong><code>as=&quot;script&quot;</code></strong>：<code>as</code> 属性进一步明确了预加载资源的类型，这里指定为 <code>script</code>，表明预加载的资源是 JavaScript 脚本。</li></ul>',43)]))}const c=i(h,[["render",e]]);export{g as __pageData,c as default};
