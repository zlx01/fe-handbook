import{_ as a,c as s,o as i,ag as n}from"./chunks/framework.C86mscM5.js";const k=JSON.parse('{"title":"Animation","description":"","frontmatter":{},"headers":[],"relativePath":"fundamentals/css/animation.md","filePath":"fundamentals/css/animation.md","lastUpdated":1742048178000}'),e={name:"fundamentals/css/animation.md"};function d(r,t,o,l,h,p){return i(),s("div",null,t[0]||(t[0]=[n('<h1 id="animation" tabindex="-1">Animation <a class="header-anchor" href="#animation" aria-label="Permalink to &quot;Animation&quot;">​</a></h1><table tabindex="0"><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td><strong>animation-name</strong></td><td></td><td>要对当前元素生效的关键帧的名字</td></tr><tr><td><strong>animation-duration</strong></td><td></td><td>动画的执行时间</td></tr><tr><td><strong>animation-delay</strong></td><td></td><td>动画的延时</td></tr><tr><td><strong>animation-timing-function</strong></td><td>ease-in-out<br>linear<br>setps(4, end)<br></td><td>过渡时序</td></tr><tr><td>animation-iteration-count</td><td>infinite</td><td></td></tr><tr><td>animation-direction</td><td>normal 默认值 从 from 向 to运行 每次都是这样 <br>reverse 从 to 向 from 运行 每次都是这样 <br>alternate 从 from 向 to运行 重复执行动画时反向执行<br>alternate-reverse 从 to 向 from运行 重复执行动画时反向执行</td><td>指定动画运行的方向</td></tr><tr><td>animation-play-state</td><td>running 默认值 动画执行<br>paused 动画停止播放并回到第一帧</td><td>设置动画的执行状态</td></tr><tr><td>animation-fill-mode</td><td>none 默认值 动画执行完毕元素回到原来位置<br>forwards 当动画结束后，元素会停留在动画最后一帧的样式上，而不是回到动画开始前的初始样式<br>backwards 动画延时等待时，在动画开始前，元素会立即应用动画第一帧的样式，而不是等到动画开始才改变样式<br>both 结合了forwards 和 backwards</td><td>动画的填充模式</td></tr><tr><td><strong>@keyframes</strong></td><td>from表示动画的开始位置 也可以使用 0%<br>to动画的结束位置 也可以使用100%</td><td>设置动画效果，必须先要设置一个关键帧，关键帧设置了动画执行每一个步骤</td></tr></tbody></table><h2 id="停止css动画播放" tabindex="-1">停止css动画播放 <a class="header-anchor" href="#停止css动画播放" aria-label="Permalink to &quot;停止css动画播放&quot;">​</a></h2><ol><li>通过animation-play-state属性设置为paused</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">box.style.animationPlayState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;paused&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ol start="2"><li>通过animation属性设置为none</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">box.style.animation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ol start="3"><li>移除动画类名</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">box.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;animate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',9)]))}const m=a(e,[["render",d]]);export{k as __pageData,m as default};
